---
import { BLOCKS, INLINES } from '@contentful/rich-text-types'
import type { BlockOrInline, CommonNode, Document, JSXElement, Options, Text } from '../../types'
import OutsideLink from '../navigation/OutsideLink.astro'

interface Props {
  json: Document
}

enum MARKS {
  BOLD = 'bold',
  ITALIC = 'italic',
  UNDERLINE = 'underline',
  CODE = 'code',
}

const { json } = Astro.props

function nodeToComponent(node: CommonNode, options: Options): JSXElement {
  const { renderNode, renderMark, renderText } = options

  if (node.nodeType === 'text') {
    return node.marks.reduce(
      (value, mark) =>
        !renderMark || !renderMark[mark.type] ? value : renderMark[mark.type](value),
      renderText ? renderText(node.value) : node.value
    )
  }

  const children = node.content.map((node) => nodeToComponent(node, options))

  return !node.nodeType || !renderNode || !renderNode[node.nodeType]
    ? children
    : renderNode[node.nodeType](node, children)
}
---

<>
  {
    json ? (
      <div class="markdown">
        {nodeToComponent(json, {
          renderNode: {
            [BLOCKS.DOCUMENT]: (_node, children) => children,
            [BLOCKS.PARAGRAPH]: (_node, children) => <p>{children}</p>,
            [BLOCKS.HEADING_1]: (_node, children) => <h1>{children}</h1>,
            [BLOCKS.HEADING_2]: (_node, children) => <h2>{children}</h2>,
            [BLOCKS.HEADING_3]: (_node, children) => <h3>{children}</h3>,
            [BLOCKS.HEADING_4]: (_node, children) => <h4>{children}</h4>,
            [BLOCKS.HEADING_5]: (_node, children) => <h5>{children}</h5>,
            [BLOCKS.HEADING_6]: (_node, children) => <h6>{children}</h6>,
            [BLOCKS.EMBEDDED_ENTRY]: (_node, children) => <div>{children}</div>,
            [BLOCKS.UL_LIST]: (_node, children) => <ul>{children}</ul>,
            [BLOCKS.OL_LIST]: (_node, children) => <ol>{children}</ol>,
            [BLOCKS.LIST_ITEM]: (_node, children) => <li>{children}</li>,
            [BLOCKS.QUOTE]: (_node, children) => <blockquote>{children}</blockquote>,
            [BLOCKS.HR]: () => <hr />,
            [BLOCKS.TABLE]: (_node, children) => (
              <table>
                <tbody>{children}</tbody>
              </table>
            ),
            [BLOCKS.TABLE_ROW]: (_node, children) => <tr>{children}</tr>,
            [BLOCKS.TABLE_HEADER_CELL]: (_node, children) => <th>{children}</th>,
            [BLOCKS.TABLE_CELL]: (_node, children) => <td>{children}</td>,
            [INLINES.ASSET_HYPERLINK]: (node) => (
              <span>
                type: {node.nodeType} id: {node.data.target.sys.id}
              </span>
            ),
            [INLINES.ENTRY_HYPERLINK]: (node) => (
              <span>
                type: {node.nodeType} id: {node.data.target.sys.id}
              </span>
            ),
            [INLINES.EMBEDDED_ENTRY]: (node) => (
              <span>
                type: {node.nodeType} id: {node.data.target.sys.id}
              </span>
            ),
            [INLINES.HYPERLINK]: (node: BlockOrInline) => (
              <OutsideLink showIcon href={node.data?.uri}>
                {(node.content?.[0] as Text)?.value}
              </OutsideLink>
            ),
          },
          renderMark: {
            [MARKS.BOLD]: (text) => <b>{text}</b>,
            [MARKS.ITALIC]: (text) => <i>{text}</i>,
            [MARKS.UNDERLINE]: (text) => <u>{text}</u>,
            [MARKS.CODE]: (text) => <code>{text}</code>,
          },
        })}
      </div>
    ) : null
  }
</>
